syntax = "proto3";
package team.v1;

import "google/api/annotations.proto";
import "team/v1/team.proto";

option go_package = "github.com/juanjiTech/termium-proto/gen/proto/team/v1;teamV1";

service TeamService {
  // 获取团队信息
  rpc GetTeam(GetTeamRequest) returns (GetTeamResponse) {
    option (google.api.http) = {
      get: "/gapi/team/v1/team"
    };
  }
  // 创建团队
  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse) {
    option (google.api.http) = {
      post: "/gapi/team/v1/team"
      body: "*"
    };
  }
  // 更新团队信息
  rpc UpdateTeam(UpdateTeamRequest) returns (UpdateTeamResponse) {
    option (google.api.http) = {
      put: "/gapi/team/v1/team"
      body: "*"
    };
  }
  // 删除团队
  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse) {
    option (google.api.http) = {
      post: "/gapi/team/v1/team/remove"
      body: "*"
    };
  }
  // 邀请成员加入团队
  rpc InviteMember(InviteMemberRequest) returns (InviteMemberResponse) {
    option (google.api.http) = {
      post: "/gapi/team/v1/team/member/invite"
      body: "*"
    };
  }
  // 列出邀请中列表
  rpc ListInvitingMember(ListInvitingMemberRequest) returns (ListInvitingMemberResponse) {
    option (google.api.http) = {
      get: "/gapi/team/v1/team/member/invite/list"
    };
  }
  // 撤回邀请
  rpc RevokeInviteMember(RevokeInviteMemberRequest) returns (RevokeInviteMemberResponse) {
    option (google.api.http) = {
      post: "/gapi/team/v1/team/member/invite/revoke"
      body: "*"
    };
  }
  // 从团队中移除成员
  rpc RemoveMember(RemoveMemberRequest) returns (RemoveMemberResponse) {
    option (google.api.http) = {
      post: "/gapi/team/v1/team/member/remove"
      body: "*"
    };
  }
  // 接受邀请加入团队
  rpc AcceptInvite(AcceptInviteRequest) returns (AcceptInviteResponse) {
    option (google.api.http) = {
      post: "/gapi/team/v1/team/member/accept"
      body: "*"
    };
  }
}

message GetTeamRequest {
  string id = 1;
}

message GetTeamResponse {
  Team team = 1;
}

message CreateTeamRequest {
  string name = 1;
  string description = 2;
  string avatar = 3;
  string publicKey = 4;   // 公钥，公钥存在服务器上，加密的私钥与相关用户关联存储
  string encryptedPrivateKey = 5;  // 创建者拥有的使用创建者公钥加密后的私钥
}

message CreateTeamResponse {
  Team team = 1;
}

message UpdateTeamRequest {
  Team team = 1;
}

message UpdateTeamResponse {
  Team team = 1;
}

message DeleteTeamRequest {
  string id = 1;
}

message DeleteTeamResponse {}

message InviteMemberRequest {
  string teamId = 1;
  string userId = 2;
  string encryptedTeamPrivateKey = 3; // 使用受邀请用户的公钥加密后的团队私钥
}

message InviteMemberResponse {
  string inviteId = 1;
}

message ListInvitingMemberRequest {
  string teamId = 1;
  string cursor = 2; // 分页游标
}

message ListInvitingMemberResponse {
  repeated InviteInfo inviteMembers = 1;
}

message RevokeInviteMemberRequest {
  string inviteId = 1;
}

message RevokeInviteMemberResponse {}

message RemoveMemberRequest {
  string teamId = 1;
  string userId = 2;
}

message RemoveMemberResponse {}

message AcceptInviteRequest {
  string inviteId = 1;
}

message AcceptInviteResponse {}
