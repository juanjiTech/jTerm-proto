syntax = "proto3";
package auth.v1;

import "google/api/annotations.proto";

option go_package = "github.com/juanjiTech/jTerm-proto/gen/proto/auth/v1;authV1";

service AuthService {
  // 用户注册
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/register",
      body: "*"
    };
  }
  rpc RegisterFinalize(RegisterFinalizeRequest) returns (RegisterFinalizeResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/register-finalize",
      body: "*"
    };
  }

  // 用户登录
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/login",
      body: "*"
    };
  }
  rpc LoginFinalize(LoginFinalizeRequest) returns (LoginFinalizeResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/login-finalize",
      body: "*"
    };
  }

  // Token刷新
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/refreshToken"
      body: "*"
    };
  }

  // 检查MFA状态，并返回MFA状态
  rpc GetMFAStatus(GetMFAStatusRequest) returns (GetMFAStatusResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/status",
      body: "*"
    };
  }

  // TOTP
  // 添加TOTP
  rpc ActiveTOTP(ActiveTOTPRequest) returns (ActiveTOTPResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/totp/active",
      body: "*"
    };
  }

  rpc DisableTOTP(DisableTOTPRequest) returns (DisableTOTPResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/totp/disable",
      body: "*"
    };
  }
  rpc CheckTOTP(CheckTOTPRequest) returns (CheckTOTPResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/totp/check",
      body: "*"
    };
  }
  rpc RecoverTOTP(RecoverTOTPRequest) returns (RecoverTOTPResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/totp/recover",
      body: "*"
    };
  }

  // Email
  rpc AddEmailMFA(AddEmailMFARequest) returns (AddEmailMFAResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/email/add",
      body: "*"
    };
  }

  rpc ActivateEmailMFA(ActivateEmailMFARequest) returns (ActivateEmailMFAResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/email/activate",
      body: "*"
    };
  }

  rpc SetPrimaryEmailMFA(SetPrimaryEmailMFARequest) returns (SetPrimaryEmailMFAResponse) {
    option (google.api.http) = {
        post: "/gapi/auth/v1/mfa/email/setPrimary",
        body: "*"
      };
  }
  rpc SendCodeEmailMFA(SendCodeEmailMFARequest) returns (SendCodeEmailMFAResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/email/send",
      body: "*"
    };
  }

  rpc CheckEmailMFA(CheckEmailMFARequest) returns (CheckEmailMFAResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/email/check",
      body: "*"
    };
  }

  rpc DisableEmailMFA(DisableEmailMFARequest) returns (DisableEmailMFAResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/mfa/email/disable",
      body: "*"
    };
  }

  // GetAccountStatus 获取sudo的ttl
  rpc GetAccountStatus(GetAccountStatusRequest) returns (GetAccountStatusResponse) {
    option (google.api.http) = {
      post: "/gapi/auth/v1/account/status",
      body: "*"
    };
  }
}

message RegisterRequest {
  string email = 1;
  string verifyCode = 2;
  bytes message1 = 3; // OPAQUE 协议的 RegistrationRequest
}

message RegisterResponse {
  bytes message2 = 1; // OPAQUE 协议的 RegistrationResponse
  string contextId = 2; // 注册会话的上下文ID
}

message RegisterFinalizeRequest {
  bytes message3 = 1; // OPAQUE 协议的 RegistrationRecord
  string contextId = 2; // 注册会话的上下文ID
}

message RegisterFinalizeResponse {
  string accessToken = 1;
  string refreshToken = 3;
}

message LoginRequest {
  string username = 1; // 账户 可为手机号或邮箱
  bytes message1 = 2; // OPAQUE 协议的 KE1
  string twoFactorAuth = 3;
}

message LoginResponse {
  bytes message2 = 1; // OPAQUE 协议的 KE2
  string contextId = 2; // 登陆会话的上下文ID
}

message LoginFinalizeRequest {
  bytes message3 = 1; // OPAQUE 协议的 KE3
  string contextId = 2; // 登陆会话的上下文ID
}

message LoginFinalizeResponse {
  string accessToken = 1;
  string refreshToken = 3;
}

message RefreshTokenRequest {
  string refreshToken = 1;
}

message RefreshTokenResponse {
  string accessToken = 1;
  string refreshToken = 3;
}

message GetMFAStatusRequest {}

// 为后期拓展可能做保留
message GetMFAStatusResponse {
  TOTPStatus totpStatus = 1;
  repeated EmailStatus emailStatus = 2;
}

message TOTPStatus {
  bool isActive = 1;
}

message EmailStatus {
  string email = 1;
  bool   isPrimary = 2;
  bool   isActive = 3;
}

// TOTP
message ActiveTOTPRequest{
  string secretKey = 1;
  string totpCode = 2;
}
message ActiveTOTPResponse{
  repeated string recoveryCode = 1;
}

message DisableTOTPRequest {
  string totpCode = 1;
}
message DisableTOTPResponse {}

message CheckTOTPRequest {
  string totpCode = 1;
}
message CheckTOTPResponse {}

message RecoverTOTPRequest {
  repeated string recoveryCode= 1;
}

message RecoverTOTPResponse {
  string newSecretKey = 1;
  repeated string newRecoveryCode = 2;
}

// Email MFA
message AddEmailMFARequest {
  string email = 1;
}
message AddEmailMFAResponse {}

message ActivateEmailMFARequest {
  string email = 1;
  string verificationCode = 2;
}
message ActivateEmailMFAResponse {}

message SetPrimaryEmailMFARequest {
  string newEmail = 1;
  string oldEmail = 2;
}
message SetPrimaryEmailMFAResponse {}

message SendCodeEmailMFARequest{
  string email = 1;
}
message SendCodeEmailMFAResponse{}

message CheckEmailMFARequest {
  string email = 1;
  string verificationCode = 2;
}
message CheckEmailMFAResponse {}

message DisableEmailMFARequest {
  string email = 1;
}
message DisableEmailMFAResponse {}

message GetAccountStatusRequest{}
message GetAccountStatusResponse{
  int64 sudoTtl = 1;
}