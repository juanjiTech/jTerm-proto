syntax = "proto3";
package sync.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "sync/v1/host.proto";
import "sync/v1/keychain.proto";
import "sync/v1/known_hosts.proto";
import "sync/v1/group.proto";

option go_package = "github.com/juanjiTech/jTerm-proto/gen/proto/sync/v1;syncV1";

service SyncService {
  // 拉取指定时间点之后的配置变动信息
  rpc Sync(SyncRequest) returns (SyncResponse) {
    option (google.api.http) = {get: "/gapi/sync/v1/sync"};
  }
  // 提交最新配置 若配置的ID为空，则创建新配置。若配置的删除时间不为空，则代表该配置已被删除。
  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update"
      body: "*"
    };
  }
  // 更新组信息 如果创建一个新的组
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update_group"
      body: "*"
    };
  }
  // 通过UID获取所有组信息
  rpc SyncGroup(SyncGroupRequest) returns (SyncGroupResponse) {
    option (google.api.http) = {get:"/gapi/sync/v1/sync_group"};
  }
  // 获取用户密钥对
  rpc GetUserKeyChain(GetUserKeyChainRequest) returns (GetUserKeyChainResponse) {
    option (google.api.http) = {get:"/gapi/sync/v1/get_user_key_chain"};
  }

  // 修改用户密钥对
  rpc UpdateUserKeyChain(UpdateUserKeyChainRequest) returns (UpdateUserKeyChainResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update_user_key_chain"
      body: "*"
    };
  }
}

message SyncRequest {
  google.protobuf.Timestamp after = 1; // 获取该时间之后的设置变化，若不设置该字段，则拉取全量配置信息
  string group_id = 2;
}

message SyncResponse {
  google.protobuf.Timestamp server_time = 1; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
  repeated Host host_set = 11;
  repeated KnownHost known_host_set = 12;
  repeated SshKey ssh_key_set = 13;
  repeated Identity identity_set = 14;
}

// 如果是用于创建新的组，则提供master_key,用于加密rsa密钥
message UpdateRequest {
  string group_id = 2;
  string publicKey = 3;
  string encrypted_privateKey = 4;  // 创建者的私钥
  oneof data {
    Host host = 11;
    KnownHost known_host = 12;
    SshKey ssh_key = 13;
    Identity identity = 14;
  }
}

message UpdateResponse {
  string encrypted_key = 1; // 被master_key加密后的密钥，用于解密后续的密文,返回给本地以再次存储。
  oneof data { // 返回更新数据的服务端版本，因为新建的数据会加上ID和时间
    Host host = 11;
    KnownHost known_host = 12;
    SshKey ssh_key = 13;
    Identity identity = 14;
  }
}

message UpdateGroupRequest {
  Group group = 1;
}

message UpdateGroupResponse {}

message SyncGroupRequest {
  google.protobuf.Timestamp after = 1;
}

message SyncGroupResponse {
  google.protobuf.Timestamp server_time = 1;
  repeated Group groups = 11;
}

message GetUserKeyChainRequest {}

message GetUserKeyChainResponse {
  string publicKey = 2;
  string encrypted_privateKey = 3;
}

message UpdateUserKeyChainRequest {
  string publicKey = 1;
  string encrypted_privateKey = 2;
}

message UpdateUserKeyChainResponse {}
