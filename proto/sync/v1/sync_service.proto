syntax = "proto3";
package sync.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "team/v1/team.proto";
import "sync/v1/host.proto";
import "sync/v1/keychain.proto";
import "sync/v1/known_hosts.proto";
import "user/v1/key_wallet.proto";

option go_package = "github.com/juanjiTech/termium-proto/gen/proto/sync/v1;syncV1";

service SyncService {
  // 拉取指定时间点之后的配置变动信息
  rpc SyncConfig(SyncConfigRequest) returns (SyncConfigResponse) {
    option (google.api.http) = {get: "/gapi/sync/v1/config"};
  }
  // 提交最新配置 若配置的ID为空，则创建新配置。若配置的删除时间不为空，则代表该配置已被删除。这里只负责配置内容修改。
  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/config"
      body: "*"
    };
  }
  // 通过UID获取所有所在组变动信息
  rpc SyncTeam(SyncTeamRequest) returns (SyncTeamResponse) {
    option (google.api.http) = {get:"/gapi/sync/v1/team"};
  }
  // 获取用户密钥对
  rpc SyncUserKeyWallet(SyncUserKeyWalletRequest) returns (SyncUserKeyWalletResponse) {
    option (google.api.http) = {get:"/gapi/sync/v1/key_wallet"};
  }
  // 修改用户密钥对，修改的时候所有相关组的加密密钥均要替换
  rpc UpdateUserKeyWallet(UpdateUserKeyWalletRequest) returns (UpdateUserKeyWalletResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/key_wallet"
      body: "*"
    };
  }
}
// SyncConfig
message SyncConfigRequest {
  google.protobuf.Timestamp after = 1; // 获取该时间之后的设置变化，若不设置该字段，则拉取全量配置信息
  string teamId = 2;
}

message SyncConfigResponse {
  google.protobuf.Timestamp server_time = 1; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
  repeated Host hostSet = 11;
  repeated KnownHost knownHostSet = 12;
  repeated SshKey sshKeySet = 13;
  repeated Identity identitySet = 14;
}

// UpdateConfig
message UpdateConfigRequest {
  string teamId = 2;
  oneof data {
    Host host = 11;
    KnownHost knownHost = 12;
    SshKey sshKey = 13;
    Identity identity = 14;
  }
}

message UpdateConfigResponse {
  google.protobuf.Timestamp server_time = 1; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
  oneof data { // 返回更新数据的服务端版本，因为新建的数据会加上ID和时间
    Host host = 11;
    KnownHost knownHost = 12;
    SshKey sshKey = 13;
    Identity identity = 14;
  }
}

// SyncTeam
message SyncTeamRequest {
  google.protobuf.Timestamp after = 1;
}

message SyncTeamResponse {
  google.protobuf.Timestamp serverTime = 1;
  repeated team.v1.Team teams = 11;
}

// SyncUserKeyWallet
message SyncUserKeyWalletRequest {
  google.protobuf.Timestamp after = 1; // 获取该时间之后的设置变化，若不设置该字段，则拉取全量配置信息
}

message SyncUserKeyWalletResponse {
  google.protobuf.Timestamp serverTime = 1; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
  string publicKey = 2;
  string encryptedPrivateKey = 3;
  repeated user.v1.UserKeyWallet userKeyWalletSet = 4;
}

// UpdateUserKeyWallet
message UpdateUserKeyWalletRequest {
  string publicKey = 1;
  string encryptedPrivateKey = 2;
  repeated user.v1.UserKeyWallet userKeyWalletSet = 4;
}

message UpdateUserKeyWalletResponse {
  string publicKey = 1;
  string encryptedPrivateKey = 2;
  repeated user.v1.UserKeyWallet userKeyWalletSet = 4;
  google.protobuf.Timestamp server_time = 5; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
}
