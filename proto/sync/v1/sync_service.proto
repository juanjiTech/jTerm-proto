syntax = "proto3";
package sync.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "sync/v1/host.proto";
import "sync/v1/keychain.proto";
import "sync/v1/known_hosts.proto";
import "sync/v1/group.proto";

option go_package = "github.com/juanjiTech/jTerm-proto/gen/proto/sync/v1;syncV1";

service SyncService {
  // 拉取指定时间点之后的配置变动信息
  rpc SyncConfig(SyncConfigRequest) returns (SyncConfigResponse) {
    option (google.api.http) = {get: "/gapi/sync/v1/sync_config"};
  }
  // 提交最新配置 若配置的ID为空，则创建新配置。若配置的删除时间不为空，则代表该配置已被删除。这里只负责配置内容修改。
  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update_config"
      body: "*"
    };
  }
  // 组的所有者修改组的密钥链
  rpc UpdateGroupKeyChain(UpdateGroupKeyChainRequest) returns (UpdateGroupKeyChainResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update_group_key_chain"
      body: "*"
    };
  }
  // 更新组信息,如果服务端密钥为空不允许修改，请先去创建密钥链。
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update_group"
      body: "*"
    };
  }
  // 通过UID获取所有组信息
  rpc SyncGroup(SyncGroupRequest) returns (SyncGroupResponse) {
    option (google.api.http) = {get:"/gapi/sync/v1/sync_group"};
  }
  // 获取用户密钥对
  rpc SyncUserKeyWallet(SyncUserKeyWalletRequest) returns (SyncUserKeyWalletResponse) {
    option (google.api.http) = {get:"/gapi/sync/v1/sync_user_key_wallet"};
  }
  // 修改用户密钥对，修改的时候所有相关组的加密密钥均要替换
  rpc UpdateUserKeyWallet(UpdateUserKeyWalletRequest) returns (UpdateUserKeyWalletResponse) {
    option (google.api.http) = {
      post:"/gapi/sync/v1/update_user_key_wallet"
      body: "*"
    };
  }
}
// SyncConfig
message SyncConfigRequest {
  google.protobuf.Timestamp after = 1; // 获取该时间之后的设置变化，若不设置该字段，则拉取全量配置信息
  string group_id = 2;
}

message SyncConfigResponse {
  google.protobuf.Timestamp server_time = 1; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
  repeated Host host_set = 11;
  repeated KnownHost known_host_set = 12;
  repeated SshKey ssh_key_set = 13;
  repeated Identity identity_set = 14;
}

// UpdateConfig
message UpdateConfigRequest {
  string group_id = 2;
  oneof data {
    Host host = 11;
    KnownHost known_host = 12;
    SshKey ssh_key = 13;
    Identity identity = 14;
  }
}

message UpdateConfigResponse {
  oneof data { // 返回更新数据的服务端版本，因为新建的数据会加上ID和时间
    Host host = 11;
    KnownHost known_host = 12;
    SshKey ssh_key = 13;
    Identity identity = 14;
  }
}

// UpdateGroupKeyChain
message UpdateGroupKeyChainRequest{
  string group_id = 1;
  string publicKey = 2;
  string encryptedGroupPrivateKey = 3;
  repeated UserKeyWallet user_key_wallet = 4;
}

message UpdateGroupKeyChainResponse{}

// UpdateGroup
message UpdateGroupRequest {
  Group group = 1;
}

message UpdateGroupResponse {}

// SyncGroup
message SyncGroupRequest {
  google.protobuf.Timestamp after = 1;
}

message SyncGroupResponse {
  google.protobuf.Timestamp server_time = 1;
  repeated Group groups = 11;
}

// SyncUserKeyWallet
message SyncUserKeyWalletRequest {
  google.protobuf.Timestamp after = 1; // 获取该时间之后的设置变化，若不设置该字段，则拉取全量配置信息
}

message SyncUserKeyWalletResponse {
  google.protobuf.Timestamp server_time = 1; // 当前服务器时间，用于给客户端下一次拉取变动时做一个参照，避免因客户端时间偏差导致同步混乱
  string publicKey = 2;
  string encryptedPrivateKey = 3;
  repeated UserKeyWallet user_key_wallet_set = 4;
}

// UpdateUserKeyWallet
message UpdateUserKeyWalletRequest {
  string publicKey = 1;
  string encryptedPrivateKey = 2;
  repeated UserKeyWallet user_key_wallet_set = 4;
}

message UpdateUserKeyWalletResponse {
  string publicKey = 1;
  string encryptedPrivateKey = 2;
  repeated UserKeyWallet user_key_wallet_set = 4;
}

message UserKeyWallet {
  string uid = 1;
  string gid = 2;
  string encryptedGroupPrivateKey = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  google.protobuf.Timestamp deleted_at = 6;
}